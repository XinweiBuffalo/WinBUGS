{
  "hash": "5c90b00871ba7df0b0a9bb3cde202a82",
  "result": {
    "markdown": "---\ntitle: \"A quick tutorial of WinBUGS and R2WinBUGS\"\ntitle-block-banner: true\ndate: 2023-04-17\nauthor:\n  - name: Xin-Wei Huang\n    affiliations:\n      - Department of Biostatistics, University at Buffalo\ndescription: Lecture of STA667 Advanced Bayesian Inference in 2023 Spring\nbibliography: references.bib\n---\n\n\n# Getting start with WinBUGS\n\nThe BUGS (Bayesian inference Using Gibbs Sampling) is a project on developing software for the Bayesian analysis of complex statistical models using Markov chain Monte Carlo (MCMC) methods. The project started in 1989 at the [MRC Biostatistics Unit](https://www.mrc-bsu.cam.ac.uk/software/bugs/){target=\"_blank\"}. WinBUGS is a statistical software based on BUGS project initially released in 1997 by MRC Biostatistics Unit, and Imperial College School of Medicine. It is a GUI for using BUGS program on Windows system. WinBUGS is no longer update since 2007 because the development of OpenBUGS. The latest version of WinBUGS is 1.4.3.\n\n## Installation of WinBUGS 1.4.3\n\n1.  Download WinBUGS 1.4.3 on your PC:\n\n    i)  [.zip file](https://www.mrc-bsu.cam.ac.uk/wp-content/uploads/2018/11/winbugs143_unrestricted.zip){target=\"_blank\"} for Windows 64 bit or 32 bit. (Recommended)\n\n    ii) [.exe file](https://www.mrc-bsu.cam.ac.uk/wp-content/uploads/WinBUGS14.exe){target=\"_blank\"} for easier installation but 32 bit Windows only.\n\n2.  Extract file folder `\\winbugs143_unrestricted.zip\\winbugs14_full_patched\\WinBUGS14` to a path that you want to store the software, for example `C:\\Program Files`.\n\n3.  Create a shortcut for `WinBUGS14.exe` to desktop or start.\n\nFor macOS, please check the  [link](https://www.r-bloggers.com/2012/01/running-r2winbugs-on-a-mac-running-osx/#:~:text=But%2C%20it%20would%20seem%20that,R2WinBUGS%20to%20run%20as%20well.).\n\n## Example of using WinBUGS\n\nConsider a statistical model $$\nX_i \\sim \\text{Normal}(\\mu,\\sigma^2)\n$$ and given the prior distributions $\\mu \\sim \\text{Normal}(0, 100^2)$ and $1 / {\\sigma}^2 \\sim \\text{Gamma}(0.001, 0.001)$.\n\nA WinBUGS program is consist of three sections: Model, Data, and Initial Values. Define our model in `model{...}`. Use `~` to specify probability distributions, or use `<-` to make transformation of parameter and data. Data will be stored in a list which has the same syntax as R. Initial values are also stored in a list.\n\n``` {{bugs}}\n\nmodel{\n  for (i in 1:20){\n    x[i] ~ dnorm (mu[1], prec[1])\n  }\n  \n  mu[1] ~ dnorm (0, 0.0001)\n  prec[1] ~ dgamma (0.001, 0.001)\n  \n  s2[1] <- 1/prec[1]\n}\n\nlist(x = c(6.62, 6.71, 5.07, 4.39, 5.68, 3.94, 5.83, 2.31, 3.60, 4.64,\n1.79, 3.12, 3.46, 8.25, 5.49, 6.49, 2.65, 9.14, 5.31, 6.58))\n\nlist( mu=c(0), prec=c(1) )\n```\n\nNote: In BUGS, the second parameter of `dnorm` is the inverse of normal variance.\n\nNow let's see how to run these codes in WinBUGS. Open WinBUGS and create an empty script (File -\\> New). ![New script](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/01_interface.png?raw=true)\n\nCopy the above code and paste them into WinBUGS. ![BUGS program](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/02_script.png?raw=true)\n\nOpen the Specification Tool (Model -\\> Specification), then highlight the model section and do \"check model\". If you define your model correctly, it will show \"model is syntactically correct.\" at the bottom left-hand corner. ![Model specification](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/03_specify_and_check.png?raw=true)\n\nThe next step is to load the data. Highlight data section and click \"load data\". You will see \"data loaded\"at the bottom left-hand corner. ![Load data](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/04_load_data.png?raw=true)\n\nAnd then compile the model by click \"compile\" and look for \"model compiled.\" ![Compile](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/05_compile.png?raw=true)\n\nSimilarly, highlight the initial values and click \"load inits\". ![Initis](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/06_inits.png?raw=true)\n\nOpen Sample Monitor Tool (Inference -\\> Samples), type in the parameters that we are going to monitor, for example \"mu\" and \"s2\", then click \"set\". ![Sampler](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/07_sampler_par.png?raw=true)\n\nOpen Update Tool (Model -\\> Update) and type in how many samples you would like to generate. Click \"update\" and wait for \"updates took x s\" message when update done. ![Update done](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/09_update_done.png?raw=true)\n\nYou can use Sample Monitor Tool to do summary statistics, time series plot for MCMC samples, density curve, etc. ![Posterior](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/10_post.png?raw=true)\n\n# The R interface of WinBUGS: R2WinBUGS\n\n`R2WinBUGS` is an package which provides an interface for running WinBUGS on R. Although we still need to specify model in a separate `.bug` file, loading data can be done on R, and complex inference on the MCMC samples will be much more easier and friendly.\n\n## Install R2WinBUGS package\n\nUse `install.packages` and `library` to install and load the package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"R2WinBUGS\")\nlibrary(\"R2WinBUGS\")\n```\n:::\n\n\n## School data example\n\nThe Scholastic Aptitude Test (SAT) data comes from the SAT-V (Verbal) on eight different high schools from an experiment Rubin (1981). The data includes the estimated treatment effects and the corresponding standard error from an ANCOVA. This example was analyzed using a hierarchical normal model: $$\ny_i\\sim \\text{Normal}(\\theta_j, \\sigma_j^2)\n$$ given the priors and hyperpriors $\\theta_j \\sim \\text{N}(\\mu_\\theta, \\sigma_\\theta^2=1/\\tau_j)$, $\\mu_\\theta \\sim \\text{N}(0, 10^6)$, and $\\sigma_\\theta \\sim \\text{U}(0, 1000)$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(schools)\nschools\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  school estimate   sd\n1      A    28.39 14.9\n2      B     7.94 10.2\n3      C    -2.75 16.3\n4      D     6.82 11.0\n5      E    -0.64  9.4\n6      F     0.63 11.4\n7      G    18.01 10.4\n8      H    12.16 17.6\n```\n:::\n:::\n\n\n### Model specification\n\nTo specify the model, we use the same syntax as we did in WinBUGS. Then create a `.txt` or `.bug` file to store the model at local path. It is also allowed to use a function containing a `BUGS` model since is has the similar syntax as R. While applying this model, only a temporary file will be created.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod1 <- function(){\n  for (j in 1:J)\n  {\n    y[j] ~ dnorm (theta[j], tau.y[j])\n    theta[j] ~ dnorm (mu.theta, tau.theta)\n    tau.y[j] <- pow(sigma.y[j], -2)\n  }\n  mu.theta ~ dnorm (0.0, 1.0E-6)\n  tau.theta <- pow(sigma.theta, -2)\n  sigma.theta ~ dunif (0, 1000)\n}\n```\n:::\n\n\nNote: When using truncation specification, `%_%` will be needed. Check `?R2WinBUGS::write.model()` for more details.\n\n### Load data and initial values\n\nData and initial values can be arranged as lists in R script. Save initial values lists to be function avoid repeated specifying values for multiple chains.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nJ <- nrow(schools)\ny <- schools$estimate\nsigma.y <- schools$sd\ndata <- list(\"J\", \"y\", \"sigma.y\")\n\ninits <- function(){\n  list(theta = rnorm(J, 0, 100), \n       mu.theta = rnorm(1, 0, 100),\n       sigma.theta = runif(1, 0, 100))\n}\n```\n:::\n\n\n### Run sampler\n\nThe sampler function `bugs()` has many arguments to control the sample generation process. For details, please see `?R2WinBUGS::bugs()`. The output is a bugs object. We can take the MCMC samples from it and do further inference. ()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nschools.sim <-  bugs(data = data,\n                     inits = inits,\n                     model.file = mod1,\n                     parameters.to.save\t\n                     = c(\"theta\", \"mu.theta\", \"sigma.theta\"),\n                     n.chains = 4,\n                     n.iter = 2000,\n                     bugs.directory = \"c:/Program Files/WinBUGS14/\")\n```\n:::\n\n\nNote: If you receive any error message about \"Cannot open the connection\" or \"Permission denied\", please reopen Rstudio with Run as administrator.\n\n### Inference on MCMC samples\n\nJust show some basic analysis. You can play more on it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# summary statistics\nprint(schools.sim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInference for Bugs model at \"C:/Users/Xinwei/AppData/Local/Temp/RtmpQ7DaKj/model4bc851e4a71.txt\", fit using WinBUGS,\n 4 chains, each with 2000 iterations (first 1000 discarded), n.thin = 4\n n.sims = 1000 iterations saved\n            mean  sd  2.5%  25%  50%  75% 97.5% Rhat n.eff\ntheta[1]    12.4 8.7  -2.5  6.6 11.2 16.9  32.5    1   360\ntheta[2]     8.4 6.9  -5.1  4.2  8.2 12.6  22.6    1  1000\ntheta[3]     6.8 8.4 -11.5  1.9  7.4 12.3  23.7    1   810\ntheta[4]     8.3 7.0  -6.2  4.2  8.4 12.4  22.7    1  1000\ntheta[5]     5.3 7.1 -10.1  1.1  5.8 10.4  17.2    1   340\ntheta[6]     6.2 7.4 -10.2  1.9  6.4 11.2  19.3    1   390\ntheta[7]    11.2 7.0  -0.7  6.4 10.6 15.4  26.9    1  1000\ntheta[8]     9.2 8.4  -7.3  4.5  9.0 14.1  26.2    1  1000\nmu.theta     8.4 5.4  -2.3  4.9  8.1 12.0  19.0    1  1000\nsigma.theta  7.2 5.6   0.5  3.0  5.9 10.3  20.9    1    85\ndeviance    60.7 2.3  57.1 59.2 60.2 61.8  66.5    1   770\n\nFor each parameter, n.eff is a crude measure of effective sample size,\nand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\n\nDIC info (using the rule, pD = Dbar-Dhat)\npD = 3.1 and DIC = 63.8\nDIC is an estimate of expected predictive error (lower deviance is better).\n```\n:::\n\n```{.r .cell-code}\nplot(schools.sim)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# time series plot\nplot(schools.sim$sims.list$theta[,1]~c(1:schools.sim$n.sims), \n     type = \"l\", \n     col = \"red\", \n     xlab = \"t\",\n     ylab = expression(theta[1]))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(density(schools.sim$sims.list$theta[,1]))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# More inference\n\n# Bayes type-I error for testing H0: theta_1<10\nmean(schools.sim$sims.list$theta[,1]>10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.571\n```\n:::\n\n```{.r .cell-code}\n# Compare the treatment effect\nmean(schools.sim$sims.list$theta[,1])>mean(schools.sim$sims.list$theta[,3])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n# References\n\n---\nnocite: |\n  @sturtz2005r2winbugs, @dominici\n---\n\n::: {#refs}\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}