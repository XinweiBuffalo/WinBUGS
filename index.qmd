---
title: "A quick tutorial of WinBUGS and R2WinBUGS"
title-block-banner: true
date: 2023-04-17
author:
  - name: Xin-Wei Huang
    affiliations:
      - Department of Biostatistics, University at Buffalo
description: Lecture of STA667 Advanced Bayesian Inference in 2023 Spring
bibliography: references.bib
---

# Getting start with WinBUGS

The BUGS (Bayesian inference Using Gibbs Sampling) is a project on developing software for the Bayesian analysis of complex statistical models using Markov chain Monte Carlo (MCMC) methods. The project started in 1989 at the [MRC Biostatistics Unit](https://www.mrc-bsu.cam.ac.uk/software/bugs/){target="_blank"}. WinBUGS is a statistical software based on BUGS project initially released in 1997 by MRC Biostatistics Unit, and Imperial College School of Medicine. It is a GUI for using BUGS program on Windows system. WinBUGS is no longer update since 2007 because the development of OpenBUGS. The latest version of WinBUGS is 1.4.3.

## Installation of WinBUGS 1.4.3

1.  Download WinBUGS 1.4.3 on your PC:

    i)  [.zip file](https://www.mrc-bsu.cam.ac.uk/wp-content/uploads/2018/11/winbugs143_unrestricted.zip){target="_blank"} for Windows 64 bit or 32 bit. (Recommended)

    ii) [.exe file](https://www.mrc-bsu.cam.ac.uk/wp-content/uploads/WinBUGS14.exe){target="_blank"} for easier installation but 32 bit Windows only.

2.  Extract file folder `\winbugs143_unrestricted.zip\winbugs14_full_patched\WinBUGS14` to a path that you want to store the software, for example `C:\Program Files`.

3.  Create a shortcut for `WinBUGS14.exe` to desktop or start.

For macOS, please check the [link](https://www.r-bloggers.com/2012/01/running-r2winbugs-on-a-mac-running-osx/#:~:text=But%2C%20it%20would%20seem%20that,R2WinBUGS%20to%20run%20as%20well.).

## Example: Syntax and operation

Consider a statistical model $$
X_i \sim \text{Normal}(\mu,\sigma^2)
$$ and given the prior distributions $\mu \sim \text{Normal}(0, 100^2)$ and $1 / {\sigma}^2 \sim \text{Gamma}(0.001, 0.001)$.

A WinBUGS program is consist of three sections: Model, Data, and Initial Values. Define our model in `model{...}`. Use `~` to specify probability distributions, or use `<-` to make transformation of parameter and data. Data will be stored in a list which has the same syntax as R. Initial values are also stored in a list.

``` BUGS

model{
  for (i in 1:20){
    x[i] ~ dnorm (mu[1], prec[1])
  }
  
  mu[1] ~ dnorm (0, 0.0001)
  prec[1] ~ dgamma (0.001, 0.001)
  
  s2[1] <- 1/prec[1]
}

list(x = c(6.62, 6.71, 5.07, 4.39, 5.68, 3.94, 5.83, 2.31, 3.60, 4.64,
1.79, 3.12, 3.46, 8.25, 5.49, 6.49, 2.65, 9.14, 5.31, 6.58))

list( mu=c(0), prec=c(1) )
```

Note: In BUGS, the second parameter of `dnorm` is the inverse of normal variance.

Now let's see how to run these codes in WinBUGS. Open WinBUGS and create an empty script (File -\> New). ![New script](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/01_interface.png?raw=true)

Copy the above code and paste them into WinBUGS. ![BUGS program](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/02_script.png?raw=true)

Open the Specification Tool (Model -\> Specification), then highlight the model section and do "check model". If you define your model correctly, it will show "model is syntactically correct." at the bottom left-hand corner. ![Model specification](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/03_specify_and_check.png?raw=true)

The next step is to load the data. Highlight data section and click "load data". You will see "data loaded"at the bottom left-hand corner. ![Load data](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/04_load_data.png?raw=true)

And then compile the model by click "compile" and look for "model compiled." ![Compile](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/05_compile.png?raw=true)

Similarly, highlight the initial values and click "load inits". ![Initis](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/06_inits.png?raw=true)

Open Sample Monitor Tool (Inference -\> Samples), type in the parameters that we are going to monitor, for example "mu" and "s2", then click "set". ![Sampler](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/07_sampler_par.png?raw=true)

Open Update Tool (Model -\> Update) and type in how many samples you would like to generate. Click "update" and wait for "updates took x s" message when update done. ![Update done](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/09_update_done.png?raw=true)

You can use Sample Monitor Tool to do summary statistics, time series plot for MCMC samples, density curve, etc. ![Posterior](https://github.com/XinweiBuffalo/WinBUGS/blob/main/pic/10_post.png?raw=true)

## Example: Use doodle



# Connect to R: R2WinBUGS

`R2WinBUGS` is an package which provides an interface for running WinBUGS on R. Although we still need to specify model in a separate `.bug` file, loading data can be done on R, and complex inference on the MCMC samples will be much more easier and friendly.

## Install R2WinBUGS package

Use `install.packages` and `library` to install and load the package.

```{r, warning=FALSE, message=FALSE}
#install.packages("R2WinBUGS")
library("R2WinBUGS")
```

## School data example

The Scholastic Aptitude Test (SAT) data comes from the SAT-V (Verbal) on eight different high schools from an experiment Rubin (1981). The data includes the estimated treatment effects and the corresponding standard error from an ANCOVA. This example was analyzed using a hierarchical normal model: $$
y_i\sim \text{Normal}(\theta_j, \sigma_j^2)
$$ given the priors and hyperpriors $\theta_j \sim \text{N}(\mu_\theta, \sigma_\theta^2=1/\tau_j)$, $\mu_\theta \sim \text{N}(0, 10^6)$, and $\sigma_\theta \sim \text{U}(0, 1000)$.

```{r}
data(schools)
schools
```

### Model specification

To specify the model, we use the same syntax as we did in WinBUGS. Then create a `.txt` or `.bug` file to store the model at local path. It is also allowed to use a function containing a `BUGS` model since is has the similar syntax as R. While applying this model, only a temporary file will be created.

```{r}
mod1 <- function(){
  for (j in 1:J)
  {
    y[j] ~ dnorm (theta[j], tau.y[j])
    theta[j] ~ dnorm (mu.theta, tau.theta)
    tau.y[j] <- pow(sigma.y[j], -2)
  }
  mu.theta ~ dnorm (0.0, 1.0E-6)
  tau.theta <- pow(sigma.theta, -2)
  sigma.theta ~ dunif (0, 1000)
}

```

Note: When using truncation specification, `%_%` will be needed. Check `?R2WinBUGS::write.model()` for more details.

### Load data and initial values

Data and initial values can be arranged as lists in R script. Save initial values lists to be function avoid repeated specifying values for multiple chains.

```{r}
J <- nrow(schools)
y <- schools$estimate
sigma.y <- schools$sd
data <- list("J", "y", "sigma.y")

inits <- function(){
  list(theta = rnorm(J, 0, 100), 
       mu.theta = rnorm(1, 0, 100),
       sigma.theta = runif(1, 0, 100))
}

```

### Run sampler

The sampler function `bugs()` has many arguments to control the sample generation process. For details, please see `?R2WinBUGS::bugs()`. The output is a bugs object. We can take the MCMC samples from it and do further inference. ()

```{r, warning=FALSE, error=FALSE}
schools.sim <-  bugs(data = data,
                     inits = inits,
                     model.file = mod1,
                     parameters.to.save	
                     = c("theta", "mu.theta", "sigma.theta"),
                     n.chains = 4,
                     n.iter = 2000,
                     bugs.directory = "c:/Program Files/WinBUGS14/")

```

Note: If you receive any error message about "Cannot open the connection" or "Permission denied", please reopen Rstudio with Run as administrator.

### Inference on MCMC samples

Just show some basic analysis. You can play more on it.

```{r}

# summary statistics
print(schools.sim)
plot(schools.sim)

# time series plot
plot(schools.sim$sims.list$theta[,1]~c(1:schools.sim$n.sims), 
     type = "l", 
     col = "red", 
     xlab = "t",
     ylab = expression(theta[1]))

plot(density(schools.sim$sims.list$theta[,1]))

# More inference

# Bayes type-I error for testing H0: theta_1<10
mean(schools.sim$sims.list$theta[,1]>10)

# Compare the treatment effect
mean(schools.sim$sims.list$theta[,1])>mean(schools.sim$sims.list$theta[,3])

```

# Other softwares

# References

---
nocite: |
  @sturtz2005r2winbugs, @dominici
---

::: {#refs}
:::
